import React, { PropTypes, Component } from 'react';

const Status = {
  LOADING: 'loading',
  LOADED:  'loaded',
  ERRORED: 'errored'
};

export default class Preload extends Component {
  static propTypes = {
    width: PropTypes.string,
    src: PropTypes.string.isRequired,
    loadingBackground: PropTypes.string,
    loadingIndicator: PropTypes.element,
    errorNotice: PropTypes.element,
  }

  constructor(props) {
    super(props);
    this.state = { 
      status: Status.LOADING 
    }
  }

  componentDidMount() {
    let loader     = new window.Image();
    loader.onerror = this.imageDidError;
    loader.onload  = this.imageDidLoad;
    loader.src     = this.props.src;
  }

  imageDidError = () => {
    this.setState({ status: Status.ERRORED });
  }

  imageDidLoad = () => {
    this.setState({ status: Status.LOADED });
  }

  render() {
    const transition = 'opacity 1.5s ease';
    const styles = {
      base: { 
        backgroundColor: this.props.loadingBackground,
        position: 'relative',
        width: this.props.width 
      },
      centered: {
        position: 'absolute',
        transform: 'translate(-50%, -50%)',
        left: '50%',
        top: '50%'
      },
      loading: { 
        opacity: 0,
        transition: transition
      },
      loaded:  { 
        opacity: 1,
        transition: transition
      },
      errored: { 
        opacity: 0,
        transition: transition
      }
    };

    return (
      <div style={styles.base}>
        <div style={styles[this.state.status]}>
          {this.props.children}
        </div>
        {this.state.status === Status.LOADING &&
          <div style={styles.centered}>{this.props.loadingIndicator}</div>
        }
        {this.state.status === Status.ERRORED &&
          <div style={styles.centered}>{this.props.errorNotice}</div>
        }
      </div>
    );
  }
}

