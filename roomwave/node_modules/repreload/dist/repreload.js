'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Status = {
  LOADING: 'loading',
  LOADED: 'loaded',
  ERRORED: 'errored'
};

var Preload = function (_Component) {
  _inherits(Preload, _Component);

  function Preload(props) {
    _classCallCheck(this, Preload);

    var _this = _possibleConstructorReturn(this, (Preload.__proto__ || Object.getPrototypeOf(Preload)).call(this, props));

    _this.imageDidError = function () {
      _this.setState({ status: Status.ERRORED });
    };

    _this.imageDidLoad = function () {
      _this.setState({ status: Status.LOADED });
    };

    _this.state = {
      status: Status.LOADING
    };
    return _this;
  }

  _createClass(Preload, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var loader = new window.Image();
      loader.onerror = this.imageDidError;
      loader.onload = this.imageDidLoad;
      loader.src = this.props.src;
    }
  }, {
    key: 'render',
    value: function render() {
      var transition = 'opacity 1.5s ease';
      var styles = {
        base: {
          backgroundColor: this.props.loadingBackground,
          position: 'relative',
          width: this.props.width
        },
        centered: {
          position: 'absolute',
          transform: 'translate(-50%, -50%)',
          left: '50%',
          top: '50%'
        },
        loading: {
          opacity: 0,
          transition: transition
        },
        loaded: {
          opacity: 1,
          transition: transition
        },
        errored: {
          opacity: 0,
          transition: transition
        }
      };

      return _react2.default.createElement(
        'div',
        { style: styles.base },
        _react2.default.createElement(
          'div',
          { style: styles[this.state.status] },
          this.props.children
        ),
        this.state.status === Status.LOADING && _react2.default.createElement(
          'div',
          { style: styles.centered },
          this.props.loadingIndicator
        ),
        this.state.status === Status.ERRORED && _react2.default.createElement(
          'div',
          { style: styles.centered },
          this.props.errorNotice
        )
      );
    }
  }]);

  return Preload;
}(_react.Component);

Preload.propTypes = {
  width: _react.PropTypes.string,
  src: _react.PropTypes.string.isRequired,
  loadingBackground: _react.PropTypes.string,
  loadingIndicator: _react.PropTypes.element,
  errorNotice: _react.PropTypes.element
};
exports.default = Preload;