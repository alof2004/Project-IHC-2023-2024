import React, { PropTypes } from 'react';
import vudu from 'vudu';

const size = (size) => {
  switch (size) {
    case 'x-small':
      return {
        fontSize: '.875rem',
        padding: '.25rem 1rem'
      };
    case 'small':
      return {
        fontSize: '1rem',
        padding: '.5rem 1.5rem'
      };
    case 'medium':
      return {
        fontSize: '1.25rem',
        padding: '.75rem 2rem'
      };
    case 'large':
      return {
        fontSize: '1.5rem',
        padding: '1rem 2.25rem'
      };
    case 'x-large': 
      return {
        fontSize: '2rem',
        padding: '1.25rem 2.5rem'
      };
  }
};

const Button = (props) => {
  const styles = vudu({
    base: {
      color: props.color,
      border: props.outline ? `${props.outline}px solid ${props.color}` : 0,
      backgroundColor: props.outline ? 'transparent' : props.backgroundColor,
      cursor: props.disabled ? 'default' : 'pointer',
      display: 'inline-block',
      verticalAlign: 'middle',
      textDecoration: 'none',
      fontFamily: 'inherit',
      fontWeight: 'inherit',
      height: 'auto',
      margin: 0,
      borderRadius: `${props.rounding}px`,
      opacity: props.disabled ? '.5' : '1',
      WebkitAppearance: 'none',
      transition: 'all .2s ease',
      ':hover': {
        opacity: props.disabled ? '.5' : '.7'
      },
      ':focus': {
        outline: 'none',
        boxShadow: '0 0 0 3px rgba(0,0,0,.25)'
      }
    }
  });
  if (props.href) {
    return (
      <a
        href={props.href}
        style={size(props.size)}
        className={`Button ${styles.base}`}>
        {props.children || props.text}
      </a>
    );
  } else {
    return (
      <button
        onClick={props.onClick}
        style={size(props.size)}
        className={`Button ${styles.base}`}
        type={props.submit ? 'submit' : 'button'}>
        {props.children || props.text}
      </button>
    );
  }
};

Button.propTypes = {
  text: PropTypes.string,
  color: PropTypes.string,
  backgroundColor: PropTypes.string,
  size: PropTypes.string,
  href: PropTypes.string,
  outline: PropTypes.number,
  rounding: PropTypes.number,
  disabled: PropTypes.bool,
  submit: PropTypes.bool,
  onClick: PropTypes.func
};

Button.defaultProps = {
  text: 'Iâ€™m a button',
  color: 'white',
  backgroundColor: 'black',
  size: 'medium',
  href: null,
  outline: null,
  rounding: 0,
  disabled: false,
  submit: false,
  onClick: null,
};

export default Button;

